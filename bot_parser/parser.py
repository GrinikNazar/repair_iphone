def parser_fom_telegram(text):

    data = {
        "number": None,
        "model": None,
        "customer_phone": None,
        "customer_name": None,
        "password": None,
        "imei": None,
        "defect": None,
        "time_work": 1,
        "warranty": False,
        "shop": 1,
    }

    asoc = {
        "–ü—Ä–∏—Å—Ç—Ä—ñ–π": "model",
        "–¢–µ–ª–µ—Ñ–æ–Ω": "customer_phone",
        "–ö–ª—ñ—î–Ω—Ç": "customer_name",
        "–ö–æ–¥ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è": "password",
        "IMEI/SN": "imei",
        "–ü–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è": "defect",
        "–ú–∞–≥–∞–∑–∏–Ω": "shop",
        "–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–µ–º–æ–Ω—Ç—É": "time_work",
    }

    text_split = text.split('\n')

    data['number'] = text_split[0].split('‚Ññ')[1]

    if "üî¥ –ì–ê–†–ê–ù–¢–Ü–ô–ù–ò–ô –†–ï–ú–û–ù–¢ üî¥" in text:
        data['warranty'] = True

    for row in text_split:
        try:
            x = row.split(':')[0]
            y = row.split(':')[1].strip()
            if x in asoc:
                data[asoc[x]] = y
        except IndexError:
            pass

    #  –ü–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    shops = {
        "inStyle": 1,
        "inStyle NEW": 2,
        "–°–Ω—è—Ç–∏–Ω": 3,
        "inStyle Kovel": 4,
    }

    data['shop'] = shops[data['shop']]
    data['model'] = ''.join(data['model'].split('(')[0])

    try:
        x = []
        for i in list(data['time_work']):
            if i.isdigit():
                x.append(i)
        data['time_work'] = max(x)
    except TypeError:
        pass

    return data
